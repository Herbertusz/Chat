{
  "parser": "espree",
  "parserOptions": {
    "ecmaVersion": 6,
    "sourceType": "script",
    "ecmaFeatures": {
      //"impliedStrict": true
    }
  },
  "env": {
    "browser": true,
    "node": true,
    "es6": true,
    "jquery": true
  },
  "rules": {
    "comma-dangle": ["error", "never"], // require or disallow trailing commas
    "no-cond-assign": ["warn", "except-parens"], //disallow assignment operators in conditional expressions
    "no-console": "off", // disallow the use of console
    "no-constant-condition": "off", // disallow constant expressions in conditions
    "no-control-regex": "off", // disallow control characters in regular expressions
    "no-debugger": "off", // disallow the use of debugger
    "no-dupe-args": "error", // disallow duplicate arguments in function definitions
    "no-dupe-keys": "error", // disallow duplicate keys in object literals
    "no-duplicate-case": "error", // disallow duplicate case labels
    "no-empty": "off", // disallow empty block statements
    "no-empty-character-class": "warn", // disallow empty character classes in regular expressions
    "no-ex-assign": "warn", // disallow reassigning exceptions in catch clauses
    "no-extra-boolean-cast": "warn", // disallow unnecessary boolean casts
    "no-extra-parens": "off", // disallow unnecessary parentheses
    "no-extra-semi": "warn", // disallow unnecessary semicolons
    "no-func-assign": "warn", // disallow reassigning function declarations
    "no-inner-declarations": ["warn", "both"], // disallow function or var declarations in nested blocks
    "no-invalid-regexp": "error", // disallow invalid regular expression strings in RegExp constructors
    "no-irregular-whitespace": "off", // disallow irregular whitespace outside of strings and comments
    "no-negated-in-lhs": "off", // disallow negating the left operand in in expressions
    "no-obj-calls": "error", // disallow calling global object properties as functions
    "no-regex-spaces": "off", // disallow multiple spaces in regular expression literals
    "no-sparse-arrays": "error", // disallow sparse arrays
    "no-unexpected-multiline": "warn", // disallow confusing multiline expressions
    "no-unreachable": "warn", // disallow unreachable code after return, throw, continue, and break statements
    "use-isnan": "error", // require calls to isNaN() when checking for NaN
    "valid-jsdoc": "off", // enforce valid JSDoc comments
    "valid-typeof": "error", // enforce comparing typeof expressions against valid strings

    "accessor-pairs": "off", // enforce getter and setter pairs in objects
    "array-callback-return": "error", // enforce return statements in callbacks of array methods
    "block-scoped-var": "error", // enforce the use of variables within the scope they are defined
    "complexity": ["warn", {"max": 20}], // enforce a maximum cyclomatic complexity allowed in a program
    "consistent-return": "off", // require return statements to either always or never specify values
    "curly": ["warn", "multi-line", "consistent"], // enforce consistent brace style for all control statements
    "default-case": "off", // require default cases in switch statements
    "dot-location": "off", // enforce consistent newlines before and after dots
    "dot-notation": "warn", // enforce dot notation whenever possible
    "eqeqeq": "error", // require the use of === and !==
    "guard-for-in": "off", // require for-in loops to include an if statement
    "no-alert": "warn", // disallow the use of alert, confirm, and prompt
    "no-caller": "error", // disallow the use of arguments.caller or arguments.callee
    "no-case-declarations": "warn", // disallow lexical declarations in case clauses
    "no-div-regex": "off", // disallow division operators explicitly at the beginning of regular expressions
    "no-else-return": "off", // disallow else blocks after return statements in if statements
    "no-empty-function": "off", // disallow empty functions
    "no-empty-pattern": "off", // disallow empty destructuring patterns
    "no-eq-null": "error", // disallow null comparisons without type-checking operators
    "no-eval": "error", // disallow the use of eval()
    "no-extend-native": "error", // disallow extending native types
    "no-extra-bind": "warn", // disallow unnecessary calls to .bind()
    "no-extra-label": "warn", // disallow unnecessary labels
    "no-fallthrough": "off", // disallow fallthrough of case statements
    "no-floating-decimal": "warn", // disallow leading or trailing decimal points in numeric literals
    "no-implicit-coercion": ["warn", {"allow": ["!!"]}], // disallow shorthand type conversions
    "no-implicit-globals": "off", // disallow var and named function declarations in the global scope
    "no-implied-eval": "error", // disallow the use of eval()-like methods
    "no-invalid-this": "off", // disallow this keywords outside of classes or class-like objects
    "no-iterator": "error", // disallow the use of the __iterator__ property
    "no-labels": "warn", // disallow labeled statements
    "no-lone-blocks": "warn", // disallow unnecessary nested blocks
    "no-loop-func": "warn", // disallow function declarations and expressions inside loop statements
    "no-magic-numbers": "off", // disallow magic numbers
    "no-multi-spaces": "off", // disallow multiple spaces
    "no-multi-str": "warn", // disallow multiline strings
    "no-native-reassign": "error", // disallow reassigning native objects
    "no-new": "warn", // disallow new operators outside of assignments or comparisons
    "no-new-func": "error", // disallow new operators with the Function object
    "no-new-wrappers": "warn", // disallow new operators with the String, Number, and Boolean objects
    "no-octal": "error", // disallow octal literals
    "no-octal-escape": "error", // disallow octal escape sequences in string literals
    "no-param-reassign": "off", // disallow reassigning function parameters
    "no-proto": "error", // disallow the use of the __proto__ property
    "no-redeclare": ["error", {"builtinGlobals": true}], // disallow var redeclaration
    "no-return-assign": ["warn", "except-parens"], // disallow assignment operators in return statements
    "no-script-url": "error", // disallow javascript: urls
    "no-self-assign": "error", // disallow assignments where both sides are exactly the same
    "no-self-compare": "error", // disallow comparisons where both sides are exactly the same
    "no-sequences": "warn", // disallow comma operators
    "no-throw-literal": "warn", // disallow throwing literals as exceptions
    "no-unmodified-loop-condition": "off", // disallow unmodified loop conditions
    "no-unused-expressions": ["warn", {"allowShortCircuit": true, "allowTernary": true}], // disallow unused expressions
    "no-unused-labels": "warn", // disallow unused labels
    "no-useless-call": "warn", // disallow unnecessary calls to .call() and .apply()
    "no-useless-concat": "warn", // disallow unnecessary concatenation of literals or template literals
    "no-useless-escape": "warn", // disallow unnecessary escape characters
    "no-void": "error", // disallow void operators
    "no-warning-comments": "off", // disallow specified warning terms in comments
    "no-with": "error", // disallow with statements
    "radix": "off", // enforce the consistent use of the radix argument when using parseInt()
    "vars-on-top": "error", // require var declarations be placed at the top of their containing scope
    "wrap-iife": ["warn", "any"], // require parentheses around immediate function invocations
    "yoda": "warn", // require or disallow “Yoda” conditions

    "strict": ["warn", "global"] // require or disallow strict mode directives
/*
    "init-declarations": ["", ""], // require or disallow initialization in var declarations
    "no-catch-shadow": ["", ""], // disallow catch clause parameters from shadowing variables in the outer scope
    "no-delete-var": ["", ""], // disallow deleting variables
    "no-label-var": ["", ""], // disallow labels that share a name with a variable
    "no-restricted-globals": ["", ""], // disallow specified global variables
    "no-shadow": ["", ""], // disallow var declarations from shadowing variables in the outer scope
    "no-shadow-restricted-names": ["", ""], // disallow identifiers from shadowing restricted names
    "no-undef": ["", ""], // disallow the use of undeclared variables unless mentioned in global comments
    "no-undef-init": ["", ""], // disallow initializing variables to undefined
    "no-undefined": ["", ""], // disallow the use of undefined as an identifier
    "no-unused-vars": ["", ""], // disallow unused variables
    "no-use-before-define": ["", ""], // disallow the use of variables before they are defined

    "callback-return": ["", ""], // require return statements after callbacks
    "global-require": ["", ""], // require require() calls to be placed at top-level module scope
    "handle-callback-err": ["", ""], // require error handling in callbacks
    "no-mixed-requires": ["", ""], // disallow require calls to be mixed with regular var declarations
    "no-new-require": ["", ""], // disallow new operators with calls to require
    "no-path-concat": ["", ""], // disallow string concatenation with __dirname and __filename
    "no-process-env": ["", ""], // disallow the use of process.env
    "no-process-exit": ["", ""], // disallow the use of process.exit()
    "no-restricted-modules": ["", ""], // disallow specified modules when loaded by require
    "no-sync": ["", ""], // disallow synchronous methods

    "array-bracket-spacing": ["", ""], // enforce consistent spacing inside array brackets
    "block-spacing": ["", ""], // enforce consistent spacing inside single-line blocks
    "brace-style": ["", ""], // enforce consistent brace style for blocks
    "camelcase": ["", ""], // enforce camelcase naming convention
    "comma-spacing": ["", ""], // enforce consistent spacing before and after commas
    "comma-style": ["", ""], // enforce consistent comma style
    "computed-property-spacing": ["", ""], // enforce consistent spacing inside computed property brackets
    "consistent-this": ["", ""], // enforce consistent naming when capturing the current execution context
    "eol-last": ["", ""], // enforce at least one newline at the end of files
    "func-names": ["", ""], // enforce named function expressions
    "func-style": ["", ""], // enforce the consistent use of either function declarations or expressions
    "id-blacklist": ["", ""], // disallow specified identifiers
    "id-length": ["", ""], // enforce minimum and maximum identifier lengths
    "id-match": ["", ""], // require identifiers to match a specified regular expression
    "indent": ["", ""], // enforce consistent indentation
    "jsx-quotes": ["", ""], // enforce the consistent use of either double or single quotes in JSX attributes
    "key-spacing": ["", ""], // enforce consistent spacing between keys and values in object literal properties
    "keyword-spacing": ["", ""], // enforce consistent spacing before and after keywords
    "linebreak-style": ["", ""], // enforce consistent linebreak style
    "lines-around-comment": ["", ""], // require empty lines around comments
    "max-depth": ["", ""], // enforce a maximum depth that blocks can be nested
    "max-len": ["", ""], // enforce a maximum line length
    "max-nested-callbacks": ["", ""], // enforce a maximum depth that callbacks can be nested
    "max-params": ["", ""], // enforce a maximum number of parameters in function definitions
    "max-statements": ["", ""], // enforce a maximum number of statements allowed in function blocks
    "max-statements-per-line": ["", ""], // enforce a maximum number of statements allowed per line
    "new-cap": ["", ""], // require constructor function names to begin with a capital letter
    "new-parens": ["", ""], // require parentheses when invoking a constructor with no arguments
    "newline-after-var": ["", ""], // require or disallow an empty line after var declarations
    "newline-before-return": ["", ""], // require an empty line before return statements
    "newline-per-chained-call": ["", ""], // require a newline after each call in a method chain
    "no-array-constructor": ["", ""], // disallow Array constructors
    "no-bitwise": ["", ""], // disallow bitwise operators
    "no-continue": ["", ""], // disallow continue statements
    "no-inline-comments": ["", ""], // disallow inline comments after code
    "no-lonely-if": ["", ""], // disallow if statements as the only statement in else blocks
    "no-mixed-spaces-and-tabs": ["", ""], // disallow mixed spaces and tabs for indentation
    "no-multiple-empty-lines": ["", ""], // disallow multiple empty lines
    "no-negated-condition": ["", ""], // disallow negated conditions
    "no-nested-ternary": ["", ""], // disallow nested ternary expressions
    "no-new-object": ["", ""], // disallow Object constructors
    "no-plusplus": ["", ""], // disallow the unary operators ++ and --
    "no-restricted-syntax": ["", ""], // disallow specified syntax
    "no-spaced-func": ["", ""], // disallow spacing between function identifiers and their applications
    "no-ternary": ["", ""], // disallow ternary operators
    "no-trailing-spaces": ["", ""], // disallow trailing whitespace at the end of lines
    "no-underscore-dangle": ["", ""], // disallow dangling underscores in identifiers
    "no-unneeded-ternary": ["", ""], // disallow ternary operators when simpler alternatives exist
    "no-whitespace-before-property": ["", ""], // disallow whitespace before properties
    "object-curly-spacing": ["", ""], // enforce consistent spacing inside braces
    "one-var": ["", ""], // enforce variables to be declared either together or separately in functions
    "one-var-declaration-per-line": ["", ""], // require or disallow newlines around var declarations
    "operator-assignment": ["", ""], // require or disallow assignment operator shorthand where possible
    "operator-linebreak": ["", ""], // enforce consistent linebreak style for operators
    "padded-blocks": ["", ""], // require or disallow padding within blocks
    "quote-props": ["", ""], // require quotes around object literal property names
    "quotes": ["", ""], // enforce the consistent use of either backticks, double, or single quotes
    "require-jsdoc": ["", ""], // require JSDoc comments
    "semi": ["", ""], // require or disallow semicolons instead of ASI
    "semi-spacing": ["", ""], // enforce consistent spacing before and after semicolons
    "sort-imports": ["", ""], // enforce sorted import declarations within module
    "sort-vars": ["", ""], // require variables within the same declaration block to be sorted
    "space-before-blocks": ["", ""], // enforce consistent spacing before blocks
    "space-before-function-paren": ["", ""], // enforce consistent spacing before function definition opening parenthesis
    "space-in-parens": ["", ""], // enforce consistent spacing inside parentheses
    "space-infix-ops": ["", ""], // require spacing around operators
    "space-unary-ops": ["", ""], // enforce consistent spacing before or after unary operators
    "spaced-comment": ["", ""], // enforce consistent spacing after the // or /* in a comment
    "wrap-regex": ["", ""], // require parenthesis around regex literals

    "arrow-body-style": ["", ""], // require braces around arrow function bodies
    "arrow-parens": ["", ""], // require parentheses around arrow function arguments
    "arrow-spacing": ["", ""], // enforce consistent spacing before and after the arrow in arrow functions
    "constructor-super": ["", ""], // require super() calls in constructors
    "generator-star-spacing": ["", ""], // enforce consistent spacing around * operators in generator functions
    "no-class-assign": ["", ""], // disallow reassigning class members
    "no-confusing-arrow": ["", ""], // disallow arrow functions where they could be confused with comparisons
    "no-const-assign": ["", ""], // disallow reassigning const variables
    "no-dupe-class-members": ["", ""], // disallow duplicate class members
    "no-duplicate-imports": ["", ""], // disallow duplicate module imports
    "no-new-symbol": ["", ""], // disallow new operators with the Symbol object
    "no-restricted-imports": ["", ""], // disallow specified modules when loaded by import
    "no-this-before-super": ["", ""], // disallow this/super before calling super() in constructors
    "no-useless-constructor": ["", ""], // disallow unnecessary constructors
    "no-var": ["", ""], // require let or const instead of var
    "object-shorthand": ["", ""], // require or disallow method and property shorthand syntax for object literals
    "prefer-arrow-callback": ["", ""], // require arrow functions as callbacks
    "prefer-const": ["", ""], // require const declarations for variables that are never reassigned after declared
    "prefer-reflect": ["", ""], // require Reflect methods where applicable
    "prefer-rest-params": ["", ""], // require rest parameters instead of arguments
    "prefer-spread": ["", ""], // require spread operators instead of .apply()
    "prefer-template": ["", ""], // require template literals instead of string concatenation
    "require-yield": ["", ""], // require generator functions to contain yield
    "template-curly-spacing": ["", ""], // require or disallow spacing around embedded expressions of template strings
    "yield-star-spacing": [] // require or disallow spacing around the * in yield* expressions
    */
  }
}
